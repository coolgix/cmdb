syntax="proto3";

package course.cmdb.resource;
option go_package="github.com/coolgix/cmdb/apps/resource";

import "github.com/infraboard/mcube/pb/page/page.proto";

//定义的三个接口
service Service {
  rpc Search (SearchRequest) returns (ResourceSet);  //查找公共信息的tag
  rpc QueryTag(QueryTagRequest) returns (TagSet); //
  rpc UpdateTag (UpdateTagRequest) returns (Resource); //更新tag
}

//标签选择器 通过key value 进行匹配，匹配key，app-atrr1，app-attr2
//以下两个标签共同组成一套业务逻辑，需要过滤 promethues.io 开头的标签
//promethues.io/port = "xxxx"
//promethues.io/metric_path = "xxxx"
message TagSelector {
  // 匹配的key, 支持LIKE匹配
  // @gotags: json:"key"
  string key = 1;
  // 匹配符
  // @gotags: json:"opertor"
  string opertor = 2;
  // 匹配的值
  // @gotags: json:"values"
  repeated string values = 3;
}

//定义三个请求
//资源的检索
message SearchRequest {
  // 分页参数
  // @gotags: json:"page"
  infraboard.mcube.page.PageRequest page = 1;
  // 资源所属域
  // @gotags: json:"domain"
  string domain = 2;
  // 资源所属空间
  // @gotags: json:"namespace"
  string namespace = 3;
  // 资源所属环境
  // @gotags: json:"env"
  string env = 4;
  // 使用方式
  // @gotags: json:"usage_mode"
  optional UsageMode usage_mode = 5;
  // 厂商
  // @gotags: json:"vendor"
  optional Vendor vendor = 6;
  // 同步的账号
  // @gotags: json:"sync_account"
  string sync_account = 7;
  // 资源类型，opentional protoc 编译过后为指针，允许为空指针
  // @gotags: json:"type"
  optional Type type = 8;
  // 服务商中的状态
  // @gotags: json:"status"
  string status = 9;
  // 资源标签，
  // @gotags: json:"tags"
  repeated TagSelector tags = 10;
  // 是否返回资源的标签, 如果标签哼多，你又不想要，可以控制返回该资源的标签？
  // 提升访问性能，避免一些不必要数据的传输。
  // @gotags: json:"with_tags"
  bool with_tags = 11;
  // 关键字参数
  // @gotags: json:"keywords"
  string keywords = 14;
  // 是否精确匹配，比如匹配ip
  // @gotags: json:"exact_match"
  bool exact_match = 15;

}


message ResourceSet {
  // @gotags: json:"total"
  int64 total =1；
  // @gotags: json:"items"
  repeated Resource items =2;

}

//请求tag的参数
message QueryTagRequest {

}



//更新我们的标签
message UpdateTagRequest {

}

//资源的描述信息
message Resource {
  //资源元数据信息，固有属性，比如云商
  //@gotags:json:"base"
  Base base = 1;
  //资源信息，通用信息，比如：IP
  //@gotags: json:"information"
  Information information = 2;
  //资源释放计划
  //@gotags: json:"release_plan"
  ReleasePlan release_plan = 3;

}

//定义厂商,使用枚举定义
enum Vendor {
  ALIYUN = 0;
  TENCENT = 1;
  HUAWEI = 2;
  VSPHERE = 3; //vmware私有化资源
  AMAZON = 4; //aws

}

//定义资源的类型
enum Type {
  HOST = 0; //定义的主机
  RDS = 1; //rds
  //可以定义很多其他的资源
  BILL = 99; //账单，跟其他的资源不太一样所以放大了
}

// 使用方式，同一个资源可能会被多个业务方使用，或者多个人共享使用
//对这种使用方式做一个标记
enum UsageMode {
  // 共享使用
  SHARED = 0;
  // 独占使用
  MONOPOLY = 1;
}

// 共享策略，
message SharedPolicy {
  // 分享的维度，这个资源被多个应用 使用，多个使用者
  // @gotags: json:"tag_key"
  string tag_key = 1;
  // 分享给哪些值，app1,app2,app3 共享使用这个资源，那些人共享这个资源user1，user2，user3
  // @gotags: json:"tag_values"
  repeated string tag_values = 2;
}



//定义资源信息的固有属性
//需要自己去云服务厂商抽象出这些信息的字段
message Base {
  // 全局唯一Id, 直接使用个云商自己的Id、云商内唯一ID ，可以通过厂商+1d做到唯一
  // @gotags: json:"id" validate:"required"
  string id = 1;
  // 同步时间，什么时候录入系统的
  // @gotags: json:"sync_at"
  int64 sync_at = 2;
  // 用于同步的凭证ID，需要权限凭证才能读取活着操作云商的资源
  // @gotags: json:"secret_id"
  string secret_id = 3;
  // 厂商
  // @gotags: json:"vendor"
  Vendor vendor = 4;
  // 资源类型
  // @gotags: json:"resource_type"
  Type resource_type = 5;
  // 地域 //如果这种变动大的字段可以做一个api专门处理变动的资源
  // @gotags: json:"region"
  string region = 6;
  // 区域
  // @gotags: json:"zone"
  string zone = 7;
  // 创建时间 //同步不一定是创建的时间。
  // @gotags: json:"create_at"
  int64  create_at = 8;
  // 基础数据Hash，通用数据hash 用于比对是否需要更新，用于提升效率
  // @gotags: json:"resource_hash"
  string resource_hash = 10;
  // 描述数据Hash 资源的特有属性，就是其他的模型表，比如主机有gpu
  // @gotags: json:"describe_hash"
  string describe_hash = 11;
  // Resource信息释放有变化，用于描述上面两个信息是否有变化
  // @gotags: json:"resource_hash_changed,omitempty"
  bool resource_hash_changed = 12;
  // Describe信息释放有变化
  // @gotags: json:"describe_hash_changed,omitempty"
  bool describe_hash_changed = 13;
  // 资源所属空间 ，跟我们的权限系统挂钩，属于哪个项目
  // @gotags: json:"namespace"
  string namespace = 14;
  // 资源所属环境
  // @gotags: json:"env"
  string env = 15;
  // 使用方式（可选的）
  // @gotags: json:"usage_mode"
  UsageMode usage_mode = 16;
  // 共享策略, 当一个资源被多个应用共享时, 可以指定允许的应用
  // @gotags: json:"shared_policy"
  SharedPolicy shared_policy = 17;
  // 资源所属域，一个组织或者一个公司，为了做多租户模型使用，多个公司使用。
  // @gotags: json:"domain"
  string domain = 18;

  //这些信息包括两个概念，一个是公司，另一个是 公司下的项目
}

//通用属性，可能会变化，用于快速解锁资源
message Information {
  // 过期时间
  // @gotags: json:"expire_at"
  int64 expire_at = 1;
  // 种类，计算型，内存型
  // @gotags: json:"category"
  string category = 2;
  // 规格，small(1c1g),根据云商的概念
  // @gotags: json:"type"
  string type = 3;
  // 资源名称
  // @gotags: json:"name"
  string name = 4;
  // 资源描述
  // @gotags: json:"description"
  string description = 5;
  // 服务商中的状态，统一多个云商的状态
  // @gotags: json:"status"
  string status = 6;
  // 资源标签，key=value 一个标签
  // @gotags: json:"tags"
  repeated Tag tags = 7;
  // 更新时间
  // @gotags: json:"update_at"
  int64 update_at = 8;
  // 同步的账号，资源的所属账号
  // @gotags: json:"sync_account"
  string sync_account = 9;
  // 公网IP, 或者域名，用于检索
  // @gotags: json:"public_ip"
  repeated string public_ip = 10;
  // 内网IP, 或者域名
  // @gotags: json:"private_ip"
  repeated string private_ip = 11;
  // 实例付费方式，按量，包年包月。idc机器一次性付费（自定义添加）
  // @gotags: json:"pay_type"
  string pay_type = 12;
}

enum TagType {
  // 用户自定义标签, 允许用户修改
  USER = 0;
  // 外部系统使用的标签第三方定义的标签, 比如云商同步过来的标签,不允许通过本系统修改，如果修改需要去第三方系统修改
  THIRD = 1;
  // 内部系统使用标签, 禁止用户修改, 表示被其他系统引用, 比如应用关联标签，app=app1
  SYSTEM = 2;
}

//返回的tag列表
message TagSet {
  // @gotags: json:"total"
  int64 total = 1;
  // @gotags: json:"items"
  repeated Tag items = 2;
}


message Tag {
  // 标签属于的资源，通过resource_id进行关联，跟数据库的设计有关系
  // @gotags: json:"resource_id"
  string resource_id = 1;
  // 标签的类型
  // @gotags: json:"type"
  TagType type = 2;
  // 标签的Key
  // @gotags: json:"key" validate:"lte=255,required"
  string key = 3;
  // 标签的值，可读性不友好，appid=0xxx111
  // @gotags: json:"value" validate:"lte=255,required"
  string value = 4;
  // 标签的值的描述, 通常用于展示,财务系统A
  // @gotags: json:"describe"
  string describe = 5;
  // 标签权重, 针对同一个key, 多个value场景, 默认值1
  // 资源的具体金额，费用是100，被多个业务方共同使用，出业务成本，面临这个成本如何分摊的问题
  // 为了让分摊更加的灵活，添加了标签的权重，更加权重的值做具体的分摊比例计算，比如a:1(1/4),b2(2/4),c:1(1/4)
  // 默认公平分摊，默认就是1，通过使用量进行分摊，外部系统（监控系统），通过使用计算出权重，设置过来。
  // @gotags: json:"weight"
  int64 weight = 6;
  // 标签是否纳入成本统计, 比如监控标签就不需要纳入到成本统计
  // @gotags: json:"is_cost"
  bool is_cost = 7;
  // 标签是否隐藏, 用于控制是否在前端展示
  // @gotags: json:"hidden"
  bool hidden = 8;
  // 标签meta信息, 比如前端需要设置标签的颜色
  // @gotags: json:"meta"
  // 后期需要添加什么可以添加了一个meta
  map<string, string> meta = 15;
}

